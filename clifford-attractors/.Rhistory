std <- 4.31
se <- std/sqrt(n)
z_sample <- abs(30.69 - 32)/se
z_sample > z_critical
n <- 36
sd <- 4.31
se <- sd/sqrt(n)
pe <- 30.69
z <- qnorm(1 - alpha) # For 90% Confidence Interval
CI.low <- pe - z*se
CI.high <- pe + z*se
CI <- c(CI.low, CI.high)
X <- 118.2
u <- 100
std <- 6.5
n <- 36
alpha <- .10
z_sample <- abs(X - u)/(std/sqrt(n))
z_critical <- qnorm(1 - alpha/2) # For 90% Confidence Interval two-tailed
z_sample > z_critical
se <- std/sqrt(n)
CI.low <- u - z_sample*se
CI.high <- u + z_sample*se
CI <- c(CI.low, CI.high)
se <- std/sqrt(n)
CI.low <- u - z_sample*se
CI.high <- u + z_sample*se
CI <- c(CI.low, CI.high)
CI
se <- std/sqrt(n)
CI.low <- X - z_sample*se
CI.high <- X + z_sample*se
CI <- c(CI.low, CI.high)
CI
alpha <- 0.01
zstar <- qnorm(1 - alpha/2)
se <- .024
pe <- .52
CI.low <- pe - zstar*se
CI.high <- pe + zstar*se
CI <- c(CI.low, CI.high)
CI
alpha <- 0.1
n <- 36
z_critical <- qnorm(1 - alpha)
std <- 4.31
se <- std/sqrt(n)
z_sample <- abs(30.69 - 32)/se
z_sample > z_critical
n <- 36
sd <- 4.31
se <- sd/sqrt(n)
pe <- 30.69
z <- qnorm(1 - alpha) # For 90% Confidence Interval
CI.low <- pe - z*se
CI.high <- pe + z*se
CI <- c(CI.low, CI.high)
CI
X <- 118.2
u <- 100
std <- 6.5
n <- 36
alpha <- .10
z_sample <- abs(X - u)/(std/sqrt(n))
z_critical <- qnorm(1 - alpha/2) # For 90% Confidence Interval two-tailed
z_sample > z_critical
se <- std/sqrt(n)
CI.low <- X - z_sample*se
CI.high <- X + z_sample*se
CI <- c(CI.low, CI.high)
CI
u <- 25 # mean
x <- 27 # variable
std <- 3 #standard deviation
# P(X > 27)
p <- 1 - abs(x - u)/std
p
n <- 20
z <- (x - u)/(std/sqrt(n))
z
1 - .9986
```{R}
1 - .9986
library(ggplot2)
diamonds
X.99 <- 44.51
std.99 <- 13.32
X.1 <- 56.81
std.99 <- 16.13
n <- 23
se <- sqrt(((std.99)^2 + (std.1)^2)/n)
X.99 <- 44.51
std.99 <- 13.32
X.1 <- 56.81
std.1 <- 16.13
n <- 23
se <- sqrt(((std.99)^2 + (std.1)^2)/n)
t.stat <- (X.99 - X.1)/(se)
X.99 <- 44.51
std.99 <- 13.32
X.1 <- 56.81
std.1 <- 16.13
n <- 23
se <- sqrt(((std.99)^2 + (std.1)^2)/n)
t.stat <- (X.99 - X.1)/(se)
t.stat
CI.low <- (X.99 - X.1) - t.stat*se
CI.high <- (X.99 - X.1) + t.stat*se
CI <- c(CI.low, CI.high)
CI.low <- (X.99 - X.1) - t.stat*se
CI.high <- (X.99 - X.1) + t.stat*se
CI <- c(CI.low, CI.high)
CI
library(datasets)
library(xts)
library(lubridate)
library(ggplot2)
library(dplyr)
air <- as.data.frame(AirPassengers)
plot(air, xlab = "Date", ylab = "Number of Passengers")
air.ts <- ts(air, frequency = 12)
str(air.ts)
air.dc <- decompose(air.ts, type = "multiplicative")
plot(air.dc)
plot(air.dc$x)
lines(air.dc$trend)
df <- read.csv("./1708-351-451-project2-data-final.csv", sep = ",", header = TRUE)
# Upon inspection, we see that a measurement has been taken every 15 minutes.
df$time <- as.POSIXct(df$time, format = "%Y-%m-%d %H:%M:%S", tz = "America/New_York")
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghir, color = "Irradiance")) +
geom_line(aes(y = iacp, color = "Power")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iapc.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
stlplus::plot.stlplus(df.ghir.stl)
vignette(package = "stlplus")
??stlplus
stlplus::plot_cycle(df.ghir.stl)
plot(df.ghir.stl)
ggplot(df.ghir.stl)
plot(df.ghir.stl)
plot(df.ghir.stl, xlab = "Day", ylab = "", title = "Decomposition of Irradiance Data")
?plot()
plot(df.ghir.stl, xlab = "Day", ylab = "", main = "Decomposition of Irradiance Data")
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.iapc.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.iapc.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
library(datasets)
library(xts)
library(lubridate)
library(ggplot2)
library(dplyr)
air <- as.data.frame(AirPassengers)
plot(air, xlab = "Date", ylab = "Number of Passengers")
air.ts <- ts(air, frequency = 12)
str(air.ts)
air.dc <- decompose(air.ts, type = "multiplicative")
plot(air.dc)
plot(air.dc$x)
lines(air.dc$trend)
df <- read.csv("./1708-351-451-project2-data-final.csv", sep = ",", header = TRUE)
# Upon inspection, we see that a measurement has been taken every 15 minutes.
df$time <- as.POSIXct(df$time, format = "%Y-%m-%d %H:%M:%S", tz = "America/New_York")
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghir, color = "Irradiance")) +
geom_line(aes(y = iacp, color = "Power")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iacp.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
rm(df.iapc.stl)
ghir.lm <- lm(df.ghir.stl$data$trend)
?lm()
?lm()
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ghir.stl$time)
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ghir.stl$data$sub.labels)
ghir.lm <- lm(df.ghir.stl$data$trend ~ as.numeric(df.ghir.stl$data$sub.labels))
iacp.lm <- lm(df.iacp.stl$data$trend ~ as.numeric(df.iacp.stl$data$sub.labels))
ghis.lm <- lm(df.ghis.stl$data$trend ~ as.numeric(df.ghis.stl$data$sub.labels))
ggplot(ghir.lm) + geom_line()
ggplot(ghir.lm) + geom_point()
ggplot(ghir.lm) + geom_line()
ggplot(df, aes(y = df$ghir, x = df$time)) + geom_line()
+ geom_line()
+ geom_point()
+ geom_point()
ggplot(df, aes(y = df.ghir.stl$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_line()
ggplot(df, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df$ghir, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df$data, aes(y = df.ghir.stl$data$trend, x = as.numeric(df.ghir.stl$data$sub.labels))) + geom_point()
ggplot(df$data, aes(y = df.ghir.stl$data$trend, x = as.numeric(df$time))) + geom_point()
ggplot(df.ghir.stl$data, aes(y = df.ghir.stl$data$trend, x = as.numeric(df$time))) + geom_point()
ggplot(df.ghir.stl$data, aes(y = df.ghir.stl$data$trend)) + geom_point()
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ as.numeric(df$time))
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ as.numeric(df$time))
iacp.lm <- lm(df.iacp.stl$data$trend ~ as.numeric(df$time))
ghis.lm <- lm(df.ghis.stl$data$trend ~ as.numeric(df$time))
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point()
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance $(Watts/m^2)$")
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df$time)
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df$time)
iacp.lm <- lm(df.iacp.stl$data$trend ~ df$time)
iacp.lm <- lm(df.iacp.stl$data$trend ~ df$time)
ghis.lm <- lm(df.ghis.stl$data$trend ~ df$time)
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
View(df.ts)
library(datasets)
library(xts)
library(lubridate)
library(ggplot2)
library(dplyr)
air <- as.data.frame(AirPassengers)
plot(air, xlab = "Date", ylab = "Number of Passengers")
air.ts <- ts(air, frequency = 12)
str(air.ts)
air.dc <- decompose(air.ts, type = "multiplicative")
plot(air.dc)
plot(air.dc$x)
lines(air.dc$trend)
df <- read.csv("./1708-351-451-project2-data-final.csv", sep = ",", header = TRUE)
# Upon inspection, we see that a measurement has been taken every 15 minutes.
df$time <- as.POSIXct(df$time, format = "%Y-%m-%d %H:%M:%S", tz = "America/New_York")
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghir, color = "Irradiance")) +
geom_line(aes(y = iacp, color = "Power")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ts$time <- df.ts$time - min(df.ts$time)
View(df.ts)
df.ts[, "time"] <- df.ts[, "time"] - min(df.ts[, "time"])
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iacp.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df$time)
iacp.lm <- lm(df.iacp.stl$data$trend ~ df$time)
ghis.lm <- lm(df.ghis.stl$data$trend ~ df$time)
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ts[, "time"])
iacp.lm <- lm(df.iacp.stl$data$trend ~ df.ts[, "time"])
ghis.lm <- lm(df.ghis.stl$data$trend ~ df.ts[, "time"])
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.ghir.stl$data, aes(y = trend, x = df.ts[, "time"])) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ts[, "time"])
iacp.lm <- lm(df.iacp.stl$data$trend ~ df.ts[, "time"])
ghis.lm <- lm(df.ghis.stl$data$trend ~ df.ts[, "time"])
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
library(datasets)
library(xts)
library(lubridate)
library(ggplot2)
library(dplyr)
air <- as.data.frame(AirPassengers)
plot(air, xlab = "Date", ylab = "Number of Passengers", main = "Number of Passengers over a Decade")
plot(air.dc$x, ylab = "Number of Passengers")
lines(air.dc$trend)
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghir, color = "Irradiance")) +
geom_line(aes(y = iacp, color = "Power")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("Irradiance (Watts/m^2) and Power (kW)")
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghi_solargis, color = "Irradiance")) +
geom_line(aes(y = iacp, color = "Power")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("Irradiance (Watts/m^2) and Power (kW)")
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("Irradiance (Watts/m^2) and Power (kW)")
df %>% filter(time < "2012-06-08 00:00:00") %>%
ggplot(aes(x = time, color = )) +
geom_line(aes(y = ghi_solargis, color = "Irradiance - SolarGIS")) +
geom_line(aes(y = iacp, color = "Power")) +
geom_line(aes(y = ghir, color = "Irradiance - Meter")) +
ggtitle("Irradiance and Power over a Week's Period in June of 2012") +
xlab("") + ylab("Irradiance (Watts/m^2) and Power (kW)")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ts[, "time"] <- df.ts[, "time"] - min(df.ts[, "time"])
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iacp.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ts[, "time"] <- df.ts[, "time"] - min(df.ts[, "time"])
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iacp.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
coeffs <- c(ghir.lm$coefficients,
iacp.lm$coefficients,
ghis.lm$coefficients)
coeffs
names(coeffs) <- c("Irradiance-Sensor", "Power Output", "Irradiance-SolarGIS")
coeffs
names(coeffs) <- c("Irradiance-Sensor", "","Power Output","", "Irradiance-SolarGIS",)
coeffs <- c(ghir.lm$coefficients,
iacp.lm$coefficients,
ghis.lm$coefficients)
names(coeffs) <- c("Irradiance-Sensor", "","Power Output","", "Irradiance-SolarGIS","")
coeffs
names(coeffs) <- c("Irradiance-Sensor Intercept", "Irradiance-Sensor Slope",
"Power Output Intercept","Power Output Slope",
"Irradiance-SolarGIS Intercept","Irradiance-SolarGIS Slope")
coeffs
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ts[, "time"])
iacp.lm <- lm(df.iacp.stl$data$trend ~ df.ts[, "time"])
ghis.lm <- lm(df.ghis.stl$data$trend ~ df.ts[, "time"])
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Irradiance From the Sensor") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Power Output") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Irradiance from the Sun")xlab("Date") + ylab("Irradiance (Watts/m^2)")
# Linear Regression with the trend vs the day number, to say how the value
# variable changes as the day increases.
ghir.lm <- lm(df.ghir.stl$data$trend ~ df.ts[, "time"])
iacp.lm <- lm(df.iacp.stl$data$trend ~ df.ts[, "time"])
ghis.lm <- lm(df.ghis.stl$data$trend ~ df.ts[, "time"])
ggplot(df.ghir.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Irradiance From the Sensor") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
ggplot(df.iacp.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Power Output") + xlab("Date") + ylab("Power Output (kW)")
ggplot(df.ghis.stl$data, aes(y = trend, x = df$time)) + geom_point() +
stat_smooth(method = "lm", col = "red") +
ggtitle("Irradiance from the Sun") + xlab("Date") + ylab("Irradiance (Watts/m^2)")
# think carefully about the frequency you'll need to define for this data
# what is the seasonal component to this data and how many data points make up a season?
## One day is a season, data is taken every 15 minutes, or .25 hours
freq <- 24/(.25)
# use s.window = "periodic" for the stlplus function
library(stlplus)
df.ts <- df %>% ts(frequency = freq)
df.ts[, "time"] <- df.ts[, "time"] - min(df.ts[, "time"])
df.ghir.stl <- stlplus(df.ts[, c("ghir")], s.window = "periodic", n.p = freq)
df.iacp.stl <- stlplus(df.ts[, c("iacp")], s.window = "periodic", n.p = freq)
df.ghis.stl <- stlplus(df.ts[, c("ghi_solargis")], s.window = "periodic", n.p = freq)
plot(df.ghir.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Sensors")
plot(df.ghis.stl, xlab = "Day", ylab = "",
main = "Decomposition of Irradiance from Solar GIS")
plot(df.iacp.stl, xlab = "Day", ylab = "",
main = "Decomposition of Power Output")
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
getwd()
setwd("./Desktop/Rfun/")
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
+ geom_point(shape = 46)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
+ geom_point(aes(color = x + y), shape = 46, alpha = .01)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
source('~/Desktop/Rfun/CliffordAttractors.R', echo=TRUE)
